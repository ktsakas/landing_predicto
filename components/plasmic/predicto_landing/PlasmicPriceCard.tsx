// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dUogsiK6TRssLNH9SokuDi
// Component: Pe-91BBXaE0yxn
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 0OtwdvXGHhRRX/component

import { useScreenVariants as useScreenVariantsgwfRdJeOnv5Uf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: _GwfRdJeOnv5UF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_predicto_landing.module.css"; // plasmic-import: dUogsiK6TRssLNH9SokuDi/projectcss
import sty from "./PlasmicPriceCard.module.css"; // plasmic-import: Pe-91BBXaE0yxn/css

export type PlasmicPriceCard__VariantMembers = {
  primary: "primary";
  borders: "flatLeft" | "flatRight" | "flatCenter";
};

export type PlasmicPriceCard__VariantsArgs = {
  primary?: SingleBooleanChoiceArg<"primary">;
  borders?: MultiChoiceArg<"flatLeft" | "flatRight" | "flatCenter">;
};

type VariantPropType = keyof PlasmicPriceCard__VariantsArgs;
export const PlasmicPriceCard__VariantProps = new Array<VariantPropType>(
  "primary",
  "borders"
);

export type PlasmicPriceCard__ArgsType = {};
type ArgPropType = keyof PlasmicPriceCard__ArgsType;
export const PlasmicPriceCard__ArgProps = new Array<ArgPropType>();

export type PlasmicPriceCard__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  h4?: p.Flex<"h4">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultPriceCardProps {
  primary?: SingleBooleanChoiceArg<"primary">;
  borders?: MultiChoiceArg<"flatLeft" | "flatRight" | "flatCenter">;
  className?: string;
}

function PlasmicPriceCard__RenderFunc(props: {
  variants: PlasmicPriceCard__VariantsArgs;
  args: PlasmicPriceCard__ArgsType;
  overrides: PlasmicPriceCard__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgwfRdJeOnv5Uf()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootborders_flatCenter]: hasVariant(
            variants,
            "borders",
            "flatCenter"
          ),
          [sty.rootborders_flatLeft]: hasVariant(
            variants,
            "borders",
            "flatLeft"
          ),
          [sty.rootborders_flatRight]: hasVariant(
            variants,
            "borders",
            "flatRight"
          ),
          [sty.rootprimary]: hasVariant(variants, "primary", "primary")
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxborders_flatCenter]: hasVariant(
            variants,
            "borders",
            "flatCenter"
          ),
          [sty.freeBoxborders_flatLeft]: hasVariant(
            variants,
            "borders",
            "flatLeft"
          ),
          [sty.freeBoxborders_flatRight]: hasVariant(
            variants,
            "borders",
            "flatRight"
          ),
          [sty.freeBoxprimary]: hasVariant(variants, "primary", "primary")
        })}
      >
        <h4
          data-plasmic-name={"h4"}
          data-plasmic-override={overrides.h4}
          className={classNames(
            projectcss.all,
            projectcss.h4,
            projectcss.__wab_text,
            sty.h4,
            {
              [sty.h4borders_flatCenter]: hasVariant(
                variants,
                "borders",
                "flatCenter"
              ),
              [sty.h4borders_flatLeft]: hasVariant(
                variants,
                "borders",
                "flatLeft"
              ),
              [sty.h4borders_flatRight]: hasVariant(
                variants,
                "borders",
                "flatRight"
              )
            }
          )}
        >
          {hasVariant(variants, "borders", "flatRight")
            ? "Enterprise"
            : hasVariant(variants, "borders", "flatLeft")
            ? "Free"
            : "Premium"}
        </h4>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__bbmfb,
            {
              [sty.textborders_flatCenter__bbmfbn3MZa]: hasVariant(
                variants,
                "borders",
                "flatCenter"
              ),
              [sty.textborders_flatLeft__bbmfbS5Lpi]: hasVariant(
                variants,
                "borders",
                "flatLeft"
              ),
              [sty.textborders_flatRight__bbmfbOAqh]: hasVariant(
                variants,
                "borders",
                "flatRight"
              ),
              [sty.textprimary__bbmfb33Anc]: hasVariant(
                variants,
                "primary",
                "primary"
              )
            }
          )}
        >
          {hasVariant(variants, "borders", "flatRight")
            ? "Flexible power and security"
            : hasVariant(variants, "borders", "flatLeft")
            ? "A complete analytics platform."
            : "A complete analytics platform."}
        </div>

        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__sxqvs, {
            [sty.imgborders_flatCenter__sxqvSn3MZa]: hasVariant(
              variants,
              "borders",
              "flatCenter"
            ),
            [sty.imgborders_flatLeft__sxqvss5Lpi]: hasVariant(
              variants,
              "borders",
              "flatLeft"
            )
          })}
          displayHeight={"auto" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"auto" as const}
          loading={"lazy" as const}
          src={{
            src: "/plasmic/predicto_landing/images/linePricingpng.png",
            fullWidth: 300,
            fullHeight: 2,
            aspectRatio: undefined
          }}
        />

        {(
          hasVariant(variants, "borders", "flatCenter")
            ? true
            : hasVariant(variants, "borders", "flatLeft")
            ? true
            : hasVariant(variants, "primary", "primary")
            ? true
            : false
        ) ? (
          <div
            className={classNames(projectcss.all, sty.columns__bpYlO, {
              [sty.columnsborders_flatCenter__bpYlOn3MZa]: hasVariant(
                variants,
                "borders",
                "flatCenter"
              ),
              [sty.columnsborders_flatLeft__bpYlOs5Lpi]: hasVariant(
                variants,
                "borders",
                "flatLeft"
              ),
              [sty.columnsprimary__bpYlO33Anc]: hasVariant(
                variants,
                "primary",
                "primary"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.column___5Aqo5)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__xwRnO)}
                displayHeight={"24px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"24px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/predicto_landing/images/checklistpng.png",
                  fullWidth: 48,
                  fullHeight: 48,
                  aspectRatio: undefined
                }}
              />
            </div>

            {(hasVariant(variants, "borders", "flatLeft") ? true : true) ? (
              <div
                className={classNames(projectcss.all, sty.column___7R1Oc, {
                  [sty.columnborders_flatLeft___7R1OcS5Lpi]: hasVariant(
                    variants,
                    "borders",
                    "flatLeft"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hDFil,
                    {
                      [sty.textborders_flatCenter__hDFiln3MZa]: hasVariant(
                        variants,
                        "borders",
                        "flatCenter"
                      ),
                      [sty.textborders_flatLeft__hDFilS5Lpi]: hasVariant(
                        variants,
                        "borders",
                        "flatLeft"
                      ),
                      [sty.textprimary__hDFil33Anc]: hasVariant(
                        variants,
                        "primary",
                        "primary"
                      )
                    }
                  )}
                >
                  {hasVariant(variants, "borders", "flatLeft")
                    ? "Stock & Crypto Watchlists"
                    : "Insights panel"}
                </div>
              </div>
            ) : null}
          </div>
        ) : null}
        {(
          hasVariant(variants, "borders", "flatCenter")
            ? true
            : hasVariant(variants, "borders", "flatLeft")
            ? true
            : hasVariant(variants, "primary", "primary")
            ? true
            : false
        ) ? (
          <div
            className={classNames(projectcss.all, sty.columns___1Tqb8, {
              [sty.columnsborders_flatCenter___1Tqb8N3MZa]: hasVariant(
                variants,
                "borders",
                "flatCenter"
              ),
              [sty.columnsborders_flatLeft___1Tqb8S5Lpi]: hasVariant(
                variants,
                "borders",
                "flatLeft"
              ),
              [sty.columnsprimary___1Tqb833Anc]: hasVariant(
                variants,
                "primary",
                "primary"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.column__t6WAh)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__dTwRz)}
                displayHeight={"24px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("16px" as const)
                    : ("24px" as const)
                }
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/predicto_landing/images/checklistpng.png",
                  fullWidth: 48,
                  fullHeight: 48,
                  aspectRatio: undefined
                }}
              />
            </div>

            <div className={classNames(projectcss.all, sty.column__vilIk)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nbRHj,
                  {
                    [sty.textborders_flatLeft__nbRHjS5Lpi]: hasVariant(
                      variants,
                      "borders",
                      "flatLeft"
                    ),
                    [sty.textprimary__nbRHj33Anc]: hasVariant(
                      variants,
                      "primary",
                      "primary"
                    )
                  }
                )}
              >
                {hasVariant(variants, "borders", "flatLeft")
                  ? "Daily Email Insights"
                  : "CLI access"}
              </div>
            </div>
          </div>
        ) : null}
        {(
          hasVariant(variants, "borders", "flatCenter")
            ? true
            : hasVariant(variants, "borders", "flatLeft")
            ? true
            : hasVariant(variants, "primary", "primary")
            ? true
            : false
        ) ? (
          <div
            className={classNames(projectcss.all, sty.columns___4BMya, {
              [sty.columnsborders_flatCenter___4BMyan3MZa]: hasVariant(
                variants,
                "borders",
                "flatCenter"
              ),
              [sty.columnsborders_flatLeft___4BMyaS5Lpi]: hasVariant(
                variants,
                "borders",
                "flatLeft"
              ),
              [sty.columnsprimary___4BMya33Anc]: hasVariant(
                variants,
                "primary",
                "primary"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.column__ebH5G)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__iElW)}
                displayHeight={"24px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"24px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/predicto_landing/images/checklistpng.png",
                  fullWidth: 48,
                  fullHeight: 48,
                  aspectRatio: undefined
                }}
              />
            </div>

            <div className={classNames(projectcss.all, sty.column__fjZeR)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jvgVb,
                  {
                    [sty.textborders_flatLeft__jvgVbS5Lpi]: hasVariant(
                      variants,
                      "borders",
                      "flatLeft"
                    ),
                    [sty.textprimary__jvgVb33Anc]: hasVariant(
                      variants,
                      "primary",
                      "primary"
                    )
                  }
                )}
              >
                {"Automation features"}
              </div>
            </div>
          </div>
        ) : null}
        {(
          hasVariant(variants, "borders", "flatCenter")
            ? true
            : hasVariant(variants, "borders", "flatLeft")
            ? true
            : hasVariant(variants, "primary", "primary")
            ? true
            : false
        ) ? (
          <div
            className={classNames(projectcss.all, sty.columns___5SYbR, {
              [sty.columnsborders_flatCenter___5SYbRn3MZa]: hasVariant(
                variants,
                "borders",
                "flatCenter"
              ),
              [sty.columnsborders_flatLeft___5SYbRs5Lpi]: hasVariant(
                variants,
                "borders",
                "flatLeft"
              ),
              [sty.columnsprimary___5SYbR33Anc]: hasVariant(
                variants,
                "primary",
                "primary"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.column___7Nff)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__fp4Bn)}
                displayHeight={"24px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"24px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/predicto_landing/images/checklistpng.png",
                  fullWidth: 48,
                  fullHeight: 48,
                  aspectRatio: undefined
                }}
              />
            </div>

            <div className={classNames(projectcss.all, sty.column__fv6ZQ)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ciwR6,
                  {
                    [sty.textprimary__ciwR633Anc]: hasVariant(
                      variants,
                      "primary",
                      "primary"
                    )
                  }
                )}
              >
                {"Team features"}
              </div>
            </div>
          </div>
        ) : null}

        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__bstv3, {
            [sty.imgborders_flatLeft__bstv3S5Lpi]: hasVariant(
              variants,
              "borders",
              "flatLeft"
            )
          })}
          displayHeight={"auto" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"auto" as const}
          loading={"lazy" as const}
          src={{
            src: "/plasmic/predicto_landing/images/linePricingpng.png",
            fullWidth: 300,
            fullHeight: 2,
            aspectRatio: undefined
          }}
        />

        {(
          hasVariant(variants, "borders", "flatCenter")
            ? true
            : hasVariant(variants, "borders", "flatRight")
            ? true
            : hasVariant(variants, "borders", "flatLeft")
            ? true
            : false
        ) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__btNal,
              {
                [sty.textborders_flatCenter__btNaln3MZa]: hasVariant(
                  variants,
                  "borders",
                  "flatCenter"
                ),
                [sty.textborders_flatLeft__btNalS5Lpi]: hasVariant(
                  variants,
                  "borders",
                  "flatLeft"
                ),
                [sty.textborders_flatRight__btNalOAqh]: hasVariant(
                  variants,
                  "borders",
                  "flatRight"
                )
              }
            )}
          >
            {hasVariant(variants, "borders", "flatCenter")
              ? "$ 50"
              : hasVariant(variants, "borders", "flatRight")
              ? "$ 800"
              : "$ 0"}
          </div>
        ) : null}

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__sb0Tm,
            {
              [sty.textborders_flatCenter__sb0Tmn3MZa]: hasVariant(
                variants,
                "borders",
                "flatCenter"
              ),
              [sty.textborders_flatLeft__sb0TmS5Lpi]: hasVariant(
                variants,
                "borders",
                "flatLeft"
              ),
              [sty.textborders_flatRight__sb0TmOAqh]: hasVariant(
                variants,
                "borders",
                "flatRight"
              )
            }
          )}
        >
          {hasVariant(variants, "borders", "flatRight")
            ? "Starting price, customizable"
            : hasVariant(variants, "borders", "flatLeft")
            ? "Free Forever"
            : "per project/month"}
        </div>

        {(
          hasVariant(variants, "borders", "flatRight")
            ? true
            : hasVariant(variants, "borders", "flatLeft")
            ? true
            : true
        ) ? (
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button, {
              [sty.buttonborders_flatCenter]: hasVariant(
                variants,
                "borders",
                "flatCenter"
              ),
              [sty.buttonborders_flatLeft]: hasVariant(
                variants,
                "borders",
                "flatLeft"
              ),
              [sty.buttonborders_flatRight]: hasVariant(
                variants,
                "borders",
                "flatRight"
              ),
              [sty.buttonprimary]: hasVariant(variants, "primary", "primary")
            })}
            color={
              hasVariant(variants, "borders", "flatLeft")
                ? ("blue" as const)
                : ("blue" as const)
            }
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__iQHjn)}
                role={"img"}
              />
            }
            link={"#" as const}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg___9ZS1T)}
                role={"img"}
              />
            }
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__txO6,
                {
                  [sty.textborders_flatCenter__txO6N3MZa]: hasVariant(
                    variants,
                    "borders",
                    "flatCenter"
                  ),
                  [sty.textborders_flatLeft__txO6S5Lpi]: hasVariant(
                    variants,
                    "borders",
                    "flatLeft"
                  ),
                  [sty.textborders_flatRight__txO6OAqh]: hasVariant(
                    variants,
                    "borders",
                    "flatRight"
                  )
                }
              )}
            >
              {hasVariant(variants, "borders", "flatCenter")
                ? "Go Become pro"
                : hasVariant(variants, "borders", "flatRight")
                ? "Everything is yours"
                : hasVariant(variants, "borders", "flatLeft")
                ? "Claim Free"
                : "Go Become pro"}
            </div>
          </Button>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "h4", "button"],
  freeBox: ["freeBox", "h4", "button"],
  h4: ["h4"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  h4: "h4";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPriceCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPriceCard__VariantsArgs;
    args?: PlasmicPriceCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPriceCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPriceCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPriceCard__ArgProps,
          internalVariantPropNames: PlasmicPriceCard__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPriceCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPriceCard";
  } else {
    func.displayName = `PlasmicPriceCard.${nodeName}`;
  }
  return func;
}

export const PlasmicPriceCard = Object.assign(
  // Top-level PlasmicPriceCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    h4: makeNodeComponent("h4"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicPriceCard
    internalVariantProps: PlasmicPriceCard__VariantProps,
    internalArgProps: PlasmicPriceCard__ArgProps
  }
);

export default PlasmicPriceCard;
/* prettier-ignore-end */
